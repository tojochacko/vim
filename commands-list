in visual mode use the 'o' operator to cycle the cursor to increase ur selection

Use 'M' to toggle to the middle of the screen

Use fx or Fx to find the character and then use ';' to continue the search

zt - put the current line to the top of the screen
zz - Recenter your screen to the current line
zb - put the current line to the bottom of the screen

lcd - change directory local to a tab

( - move to the start of a sentence
) - move to the end of a sentence
{ - move to the start of a paragraph
} - move to the end of a paragraph

H - move your cursor near the top of the screen
M - move your cursor to the middle of the screen
L - move your cursor near the bottom of the screen


----Tabs-------
:tabo will close all the other open tabs except the current one

-----Scrolling

Ctrl + b - move 1 screen up
Ctrl + f - move 1 screen down
Ctrl + u - move 1/2 screen up
Ctrl + d - move 1/2 screen down
Ctrl + y - move 1 line up
Ctrl + e - move 1 line down

-----Scrolling end

-----Indentation-----

>> - indent inside according to the tabspace set
<< - indent outside according to the tabspace set
Ctrl + t - indent inside while in insert mode
Ctrl + d - indent outside while in insert mode

-----Indentation end-----

-----Autocomplete-----

Ctrl + n - autocomplete a word(should be present in the current buffer)
Ctrl + x && Ctrl + l - autocomplete a line(should be present in the current buffer)

-----Autocomplete end-----

vip - will select para
vit - will select tag
vis - will select sentence
viw - will select word
vi] - will select everything between []
vi) - will select everything between ()
vib - will also select everything between ()

`` or '' - will position the cursor before the last jump
`. or '. - will take you to the last edit location
`0 - The location of the cursor when you last exited vim
marks - will list all the marks in the file.
delm a - will delete mark a


* - search current word within the file.
# - search backward.
g* - search part of the current word
g# - search backwards

search can also be combined with operator commands :)

for e.g: y/function - will yank everything from the current position uptil the function text

d?; - will delete everything from current position to the previous occurence of ;

v/test - will select everything from the current position to the next occurence of test.

c2/end - change all the text from the current cursor position upto the second occurence of end word.


[%,l,$,`a,+5,-3,.]s/s/r/[g,c,i,I,n,p,10] - g for global, c for confirm, i not case sensitive, I for case sensitive, n for show num of lines, p for print, 10 is the range, next 10 lines
|
% - All lines in a buffer
l - first line of the the buffer
$ - last line of the buffer
`a - on line which is marked a
+5 - 5 lines down
-3 - 3 lines up
. - current line


There are 26 named registers in vim, corresponding to the letters of the alphabet

You can store your operations in a register by using a macro.

qa - start recording your keystrokes in register 'a'
q - will stop the recording.
@a - will repeat the keystrokes recorded in the macro

Run macro across multiple lines
--------------------------------

In Normal Mode:  <num of lines>@<macro name>
In Command Mode: :<num of lines> norm @<macro name>

"ayy - Read current line into register 'a'
"Ayy - Append the current line to register 'a' (Using capitals for register will no over write but append to the regsiter)
"bP - Paste contents of register 'b' above current line
"cc3w - Change three words, putting the previous three words into register 'c'


za - enable/disable folds
zR - disable folds in the entire file

ba - open all buffers in split windows

Black hole register
------------------------
This is used when we don't want to overwrite the register we have when we just used 'dd' command
"_ - Black hole register



"0p - This will paste the recently yanked text
"1p - This will paste the most recently deleted text
"2p - This will reference the text deleted before that and upto "9

Ctrl - W t Ctrl - W H : convert a horizontal split to vertical split
Ctrl - W t Ctrl - W K : convert a vertical split to horizontal split


q: - opens a new split window with the last run vim column commands

/Ctrl - r + 0: search for the yanked text

<Ctrl-a> if your cursor is over a number it increments that number
<Ctrl-x> if your cursor is over a number it decrements that number
